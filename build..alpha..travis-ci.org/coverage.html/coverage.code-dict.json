{"/home/travis/build/npmtest/node-npmtest-slow-deps/test.js":"/* istanbul instrument in package npmtest_slow_deps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slow-deps/lib.npmtest_slow_deps.js":"/* istanbul instrument in package npmtest_slow_deps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_slow_deps = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_slow_deps = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-slow-deps/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-slow-deps && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_slow_deps */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_slow_deps\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_slow_deps.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_slow_deps.rollup.js'] =\n            local.assetsDict['/assets.npmtest_slow_deps.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_slow_deps.__dirname + '/lib.npmtest_slow_deps.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-slow-deps/node_modules/slow-deps/index.js":"#!/usr/bin/env node\n\n'use strict'\n\nif (!global.Promise) {\n  global.Promise = require('lie')\n}\nvar temp = require('temp')\nvar fs = require('fs')\nvar exec = require('child-process-promise').exec\nvar denodeify = require('denodeify')\nvar shellEscape = require('any-shell-escape')\nvar extend = require('js-extend').extend\nvar mkdir = denodeify(temp.mkdir)\nvar readFile = denodeify(fs.readFile)\nvar readdir = denodeify(fs.readdir)\nvar stat = denodeify(fs.stat)\nvar writeFile = denodeify(fs.writeFile)\nvar appendFile = denodeify(fs.appendFile)\nvar path = require('path')\nvar now = require('performance-now')\nvar ProgressBar = require('progress')\nvar getFolderSize = denodeify(require('get-folder-size'))\nvar prettierBytes = require('prettier-bytes')\nvar prettyMs = require('pretty-ms')\nvar tablify = require('tablify').tablify\nvar sum = require('math-sum')\nvar ncp = denodeify(require('ncp'))\nvar yargs = require('yargs')\ntemp.track()\n\nvar argv = yargs\n  .usage('Usage: $0 [options]')\n\n  .boolean('production')\n  .describe('production', 'Skip devDependencies')\n  .alias('production', 'prod')\n\n  .boolean('no-optional')\n  .describe('no-optional', 'Skip optionalDependencies')\n\n  .boolean('no-shrinkwrap')\n  .describe('no-shrinkwrap', 'Ignore npm-shrinkwrap.json')\n\n  .example('$0', 'measure all deps in the current project')\n  .example('$0 --production --no-optional', 'skip both optional and dev dependencies')\n\n  .help('help')\n  .alias('h', 'help')\n  .argv\n\nfunction formatPlural (num, strSingular, strPlural) {\n  return num + ' ' + (num === 1 ? strSingular : strPlural)\n}\n\nfunction getDeps () {\n  return readFile('package.json', 'utf8').then(function (str) {\n    var pkgJson = JSON.parse(str)\n    var deps = extend({}, pkgJson.dependencies)\n    var devSkipped = 0\n    var optionalSkipped = 0\n    // Include devDependencies only if --production is absent\n    if (!argv.production) {\n      extend(deps, pkgJson.devDependencies)\n    } else {\n      devSkipped = Object.keys(pkgJson.devDependencies || {}).length\n    }\n    // Include optionalDependencies only if --no-optional argument is absent.\n    // Note that yargs parses \"--no-*\" deps in a special way, hence this `!== false` check.\n    if (argv.optional !== false) {\n      extend(deps, pkgJson.optionalDependencies)\n    } else {\n      optionalSkipped = Object.keys(pkgJson.optionalDependencies || {}).length\n    }\n    var startMessage = 'Analyzing ' + Object.keys(deps).length + ' dependencies'\n    if (devSkipped && optionalSkipped) {\n      startMessage += ' (skipping ' + formatPlural(devSkipped, 'devDependency', 'devDependencies') +\n        ' and ' + formatPlural(optionalSkipped, 'optionalDependency', 'optionalDependencies') + ')'\n    } else if (devSkipped) {\n      startMessage += ' (skipping ' + formatPlural(devSkipped, 'devDependency', 'devDependencies') + ')'\n    } else if (optionalSkipped) {\n      startMessage += ' (skipping ' + formatPlural(optionalSkipped, 'optionalDependency', 'optionalDependencies') + ')'\n    }\n    startMessage += '...'\n    console.log(startMessage)\n    return deps\n  }).catch(function () {\n    throw new Error('No package.json in the current directory.')\n  })\n}\n\nfunction getShrinkwrapDeps () {\n  return stat('npm-shrinkwrap.json').then(function (file) {\n    if (argv.shrinkwrap !== false && file.isFile()) {\n      return readFile('npm-shrinkwrap.json', 'utf8').then(function (str) {\n        return JSON.parse(str).dependencies || {}\n      })\n    }\n    return {}\n  }).catch(function () {\n    return {}\n  })\n}\n\nfunction createEmptyNpmrc (dir) {\n  return writeFile(path.join(dir, '.npmrc'), '', 'utf8')\n}\n\nfunction setupNpmrc (toDir) {\n  // copy .npmrc from current directory if possible\n  return stat('.npmrc').then(function (file) {\n    if (file.isFile()) {\n      return ncp('.npmrc', path.join(toDir, '.npmrc'))\n    }\n    return createEmptyNpmrc(toDir)\n  }).catch(function () {\n    return createEmptyNpmrc(toDir)\n  })\n}\n\nfunction createNpmShrinkwrap (dir, dep) {\n  return writeFile(path.join(dir, 'npm-shrinkwrap.json'), JSON.stringify(dep), 'utf8')\n}\n\nfunction createPackageJson (dir, dep, version) {\n  var content = '{ \"dependencies\": { \"' + dep + '\": \"' + version + '\" } }'\n  return writeFile(path.join(dir, 'package.json'), content, 'utf8')\n}\n\nfunction doNpmInstalls (deps, shrinkwrapDeps) {\n  var promise = Promise.resolve()\n  var bar = new ProgressBar('[:bar] :percent :etas', {\n    total: Object.keys(deps).length,\n    width: 20\n  })\n  var times = []\n\n  function install (dep, version, dir) {\n    var cache = path.join(dir, '.cache')\n    var nodeModules = path.join(dir, 'node_modules')\n\n    return setupNpmrc(dir).then(function () {\n      // set the cache to a local cache directory\n      return appendFile(path.join(dir, '.npmrc'), '\\ncache=' + cache, 'utf8')\n    }).then(function () {\n      if (!shrinkwrapDeps[dep]) {\n        return\n      }\n      return createNpmShrinkwrap(dir, shrinkwrapDeps[dep])\n    }).then(function () {\n      return createPackageJson(dir, dep, version)\n    }).then(function () {\n      var start = now()\n      return exec(shellEscape([ 'npm', 'install' ]), {\n        cwd: dir,\n        env: process.env\n      }).then(function () {\n        var totalTime = now() - start\n        return getFolderSize(nodeModules).then(function (size) {\n          return readdir(nodeModules).then(function (subDeps) {\n            times.push({\n              time: totalTime,\n              size: size,\n              dep: dep,\n              subDeps: subDeps.length - 1\n            })\n            bar.tick()\n          })\n        })\n      })\n    })\n  }\n\n  Object.keys(deps).forEach(function (dep) {\n    var version = deps[dep]\n    promise = promise.then(function () {\n      return mkdir('')\n    }).then(function (dir) {\n      return install(dep, version, dir)\n    })\n  })\n  return promise.then(function () {\n    return report(times)\n  })\n}\n\nfunction report (times) {\n  times = times.sort(function (a, b) {\n    return b.time - a.time\n  })\n  var header = ['Dependency', 'Time', 'Size', '# Deps']\n  var table = [header].concat(times.map(function (time) {\n    return [\n      time.dep,\n      prettyMs(time.time),\n      prettierBytes(time.size),\n      time.subDeps\n    ]\n  }))\n  console.log(tablify(table, {\n    show_index: false,\n    has_header: true\n  }))\n  console.log('Total time (non-deduped): ' + prettyMs(sum(times.map(function (time) {\n    return time.time\n  }))))\n  console.log('Total size (non-deduped): ' + prettierBytes(sum(times.map(function (time) {\n    return time.size\n  }))))\n}\n\nPromise.all([getDeps(), getShrinkwrapDeps()]).then(function (results) {\n  var deps = results[0]\n  var shrinkwrap = results[1]\n  return doNpmInstalls(deps, shrinkwrap)\n}).then(function () {\n  process.exit(0)\n}).catch(function (err) {\n  console.error(err)\n  console.error(err.stack)\n  process.exit(1)\n})\n"}